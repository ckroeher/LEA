/*
 * generated by Xtext 2.18.0
 */
package net.ssehub.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import net.ssehub.ide.contentassist.antlr.internal.InternalLeaParser;
import net.ssehub.services.LeaGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LeaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LeaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LeaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAnalysisDefinitionAccess().getAlternatives_1(), "rule__AnalysisDefinition__Alternatives_1");
			builder.put(grammarAccess.getAssignmentAccess().getAlternatives_1(), "rule__Assignment__Alternatives_1");
			builder.put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
			builder.put(grammarAccess.getAnalysisDefinitionAccess().getGroup(), "rule__AnalysisDefinition__Group__0");
			builder.put(grammarAccess.getChangeIdentifierAssignmentAccess().getGroup(), "rule__ChangeIdentifierAssignment__Group__0");
			builder.put(grammarAccess.getChangeIdentifierAssignmentAccess().getGroup_4(), "rule__ChangeIdentifierAssignment__Group_4__0");
			builder.put(grammarAccess.getArtifactDeclarationAccess().getGroup(), "rule__ArtifactDeclaration__Group__0");
			builder.put(grammarAccess.getFragmentDeclarationAccess().getGroup(), "rule__FragmentDeclaration__Group__0");
			builder.put(grammarAccess.getResultDeclarationAccess().getGroup(), "rule__ResultDeclaration__Group__0");
			builder.put(grammarAccess.getSetDefinitionAccess().getGroup(), "rule__SetDefinition__Group__0");
			builder.put(grammarAccess.getIterationAccess().getGroup(), "rule__Iteration__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_0(), "rule__Operation__Group_0__0");
			builder.put(grammarAccess.getOperationAccess().getGroup_2(), "rule__Operation__Group_2__0");
			builder.put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getAnalysisDefinitionAccess().getElementsAssignment_1_0(), "rule__AnalysisDefinition__ElementsAssignment_1_0");
			builder.put(grammarAccess.getAnalysisDefinitionAccess().getElementsAssignment_1_1(), "rule__AnalysisDefinition__ElementsAssignment_1_1");
			builder.put(grammarAccess.getAnalysisDefinitionAccess().getElementsAssignment_1_2(), "rule__AnalysisDefinition__ElementsAssignment_1_2");
			builder.put(grammarAccess.getAnalysisDefinitionAccess().getElementsAssignment_1_3(), "rule__AnalysisDefinition__ElementsAssignment_1_3");
			builder.put(grammarAccess.getChangeIdentifierAssignmentAccess().getIdentifierAssignment_1(), "rule__ChangeIdentifierAssignment__IdentifierAssignment_1");
			builder.put(grammarAccess.getChangeIdentifierAssignmentAccess().getElementsAssignment_3(), "rule__ChangeIdentifierAssignment__ElementsAssignment_3");
			builder.put(grammarAccess.getChangeIdentifierAssignmentAccess().getElementsAssignment_4_1(), "rule__ChangeIdentifierAssignment__ElementsAssignment_4_1");
			builder.put(grammarAccess.getArtifactDeclarationAccess().getTypeAssignment_2(), "rule__ArtifactDeclaration__TypeAssignment_2");
			builder.put(grammarAccess.getArtifactDeclarationAccess().getSetAssignment_4(), "rule__ArtifactDeclaration__SetAssignment_4");
			builder.put(grammarAccess.getArtifactDeclarationAccess().getNameAssignment_5(), "rule__ArtifactDeclaration__NameAssignment_5");
			builder.put(grammarAccess.getArtifactDeclarationAccess().getInitializationAssignment_6(), "rule__ArtifactDeclaration__InitializationAssignment_6");
			builder.put(grammarAccess.getFragmentDeclarationAccess().getTypeAssignment_2(), "rule__FragmentDeclaration__TypeAssignment_2");
			builder.put(grammarAccess.getFragmentDeclarationAccess().getSetAssignment_4(), "rule__FragmentDeclaration__SetAssignment_4");
			builder.put(grammarAccess.getFragmentDeclarationAccess().getNameAssignment_5(), "rule__FragmentDeclaration__NameAssignment_5");
			builder.put(grammarAccess.getFragmentDeclarationAccess().getInitializationAssignment_6(), "rule__FragmentDeclaration__InitializationAssignment_6");
			builder.put(grammarAccess.getResultDeclarationAccess().getTypeAssignment_2(), "rule__ResultDeclaration__TypeAssignment_2");
			builder.put(grammarAccess.getResultDeclarationAccess().getSetAssignment_4(), "rule__ResultDeclaration__SetAssignment_4");
			builder.put(grammarAccess.getResultDeclarationAccess().getNameAssignment_5(), "rule__ResultDeclaration__NameAssignment_5");
			builder.put(grammarAccess.getResultDeclarationAccess().getInitializationAssignment_6(), "rule__ResultDeclaration__InitializationAssignment_6");
			builder.put(grammarAccess.getSetDefinitionAccess().getIterationAssignment_2(), "rule__SetDefinition__IterationAssignment_2");
			builder.put(grammarAccess.getIterationAccess().getIteratorAssignment_0(), "rule__Iteration__IteratorAssignment_0");
			builder.put(grammarAccess.getIterationAccess().getIterableAssignment_2(), "rule__Iteration__IterableAssignment_2");
			builder.put(grammarAccess.getAssignmentAccess().getElementAssignment_1_0(), "rule__Assignment__ElementAssignment_1_0");
			builder.put(grammarAccess.getAssignmentAccess().getOperationAssignment_1_1(), "rule__Assignment__OperationAssignment_1_1");
			builder.put(grammarAccess.getOperationAccess().getElementAssignment_0_0(), "rule__Operation__ElementAssignment_0_0");
			builder.put(grammarAccess.getOperationAccess().getCallAssignment_1(), "rule__Operation__CallAssignment_1");
			builder.put(grammarAccess.getOperationAccess().getCallAssignment_2_1(), "rule__Operation__CallAssignment_2_1");
			builder.put(grammarAccess.getCallAccess().getNameAssignment_0(), "rule__Call__NameAssignment_0");
			builder.put(grammarAccess.getCallAccess().getParametersAssignment_2(), "rule__Call__ParametersAssignment_2");
			builder.put(grammarAccess.getParameterListAccess().getParameterListAssignment_0(), "rule__ParameterList__ParameterListAssignment_0");
			builder.put(grammarAccess.getParameterListAccess().getParameterListAssignment_1_1(), "rule__ParameterList__ParameterListAssignment_1_1");
			builder.put(grammarAccess.getParameterAccess().getTextAssignment_0(), "rule__Parameter__TextAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getElementAssignment_1(), "rule__Parameter__ElementAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getOperationAssignment_2(), "rule__Parameter__OperationAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LeaGrammarAccess grammarAccess;

	@Override
	protected InternalLeaParser createParser() {
		InternalLeaParser result = new InternalLeaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LeaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LeaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
