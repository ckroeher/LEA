/*
 * generated by Xtext 2.18.0
 */
package net.ssehub.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LeaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AnalysisDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.AnalysisDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnalysisDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementsArtifactDeclarationParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cElementsFragmentDeclarationParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cElementsResultDeclarationParserRuleCall_1_2_0 = (RuleCall)cElementsAssignment_1_2.eContents().get(0);
		private final Assignment cElementsAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cElementsChangeIdentifierAssignmentParserRuleCall_1_3_0 = (RuleCall)cElementsAssignment_1_3.eContents().get(0);
		
		//AnalysisDefinition:
		//	{AnalysisDefinition} (elements+=ArtifactDeclaration
		//	| elements+=FragmentDeclaration
		//	| elements+=ResultDeclaration
		//	| elements+=ChangeIdentifierAssignment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{AnalysisDefinition} (elements+=ArtifactDeclaration | elements+=FragmentDeclaration | elements+=ResultDeclaration |
		//elements+=ChangeIdentifierAssignment)*
		public Group getGroup() { return cGroup; }
		
		//{AnalysisDefinition}
		public Action getAnalysisDefinitionAction_0() { return cAnalysisDefinitionAction_0; }
		
		//(elements+=ArtifactDeclaration | elements+=FragmentDeclaration | elements+=ResultDeclaration |
		//elements+=ChangeIdentifierAssignment)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//elements+=ArtifactDeclaration
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//ArtifactDeclaration
		public RuleCall getElementsArtifactDeclarationParserRuleCall_1_0_0() { return cElementsArtifactDeclarationParserRuleCall_1_0_0; }
		
		//elements+=FragmentDeclaration
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//FragmentDeclaration
		public RuleCall getElementsFragmentDeclarationParserRuleCall_1_1_0() { return cElementsFragmentDeclarationParserRuleCall_1_1_0; }
		
		//elements+=ResultDeclaration
		public Assignment getElementsAssignment_1_2() { return cElementsAssignment_1_2; }
		
		//ResultDeclaration
		public RuleCall getElementsResultDeclarationParserRuleCall_1_2_0() { return cElementsResultDeclarationParserRuleCall_1_2_0; }
		
		//elements+=ChangeIdentifierAssignment
		public Assignment getElementsAssignment_1_3() { return cElementsAssignment_1_3; }
		
		//ChangeIdentifierAssignment
		public RuleCall getElementsChangeIdentifierAssignmentParserRuleCall_1_3_0() { return cElementsChangeIdentifierAssignmentParserRuleCall_1_3_0; }
	}
	public class ChangeIdentifierAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.ChangeIdentifierAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsIDTerminalRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElementsIDTerminalRuleCall_4_1_0 = (RuleCall)cElementsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ChangeIdentifierAssignment:
		//	'assign' identifier=ID 'to' elements+=ID (',' elements+=ID)* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'assign' identifier=ID 'to' elements+=ID (',' elements+=ID)* ';'?
		public Group getGroup() { return cGroup; }
		
		//'assign'
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_2() { return cToKeyword_2; }
		
		//elements+=ID
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ID
		public RuleCall getElementsIDTerminalRuleCall_3_0() { return cElementsIDTerminalRuleCall_3_0; }
		
		//(',' elements+=ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//elements+=ID
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }
		
		//ID
		public RuleCall getElementsIDTerminalRuleCall_4_1_0() { return cElementsIDTerminalRuleCall_4_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ArtifactDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.ArtifactDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetSetDefinitionParserRuleCall_4_0 = (RuleCall)cSetAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cInitializationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitializationAssignmentParserRuleCall_6_0 = (RuleCall)cInitializationAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ArtifactDeclaration:
		//	'Artifact' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Artifact' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?
		public Group getGroup() { return cGroup; }
		
		//'Artifact'
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//set=SetDefinition?
		public Assignment getSetAssignment_4() { return cSetAssignment_4; }
		
		//SetDefinition
		public RuleCall getSetSetDefinitionParserRuleCall_4_0() { return cSetSetDefinitionParserRuleCall_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//initialization=Assignment?
		public Assignment getInitializationAssignment_6() { return cInitializationAssignment_6; }
		
		//Assignment
		public RuleCall getInitializationAssignmentParserRuleCall_6_0() { return cInitializationAssignmentParserRuleCall_6_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class FragmentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.FragmentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFragmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetSetDefinitionParserRuleCall_4_0 = (RuleCall)cSetAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cInitializationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitializationAssignmentParserRuleCall_6_0 = (RuleCall)cInitializationAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FragmentDeclaration:
		//	'Fragment' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Fragment' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?
		public Group getGroup() { return cGroup; }
		
		//'Fragment'
		public Keyword getFragmentKeyword_0() { return cFragmentKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//set=SetDefinition?
		public Assignment getSetAssignment_4() { return cSetAssignment_4; }
		
		//SetDefinition
		public RuleCall getSetSetDefinitionParserRuleCall_4_0() { return cSetSetDefinitionParserRuleCall_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//initialization=Assignment?
		public Assignment getInitializationAssignment_6() { return cInitializationAssignment_6; }
		
		//Assignment
		public RuleCall getInitializationAssignmentParserRuleCall_6_0() { return cInitializationAssignmentParserRuleCall_6_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ResultDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.ResultDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetSetDefinitionParserRuleCall_4_0 = (RuleCall)cSetAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Assignment cInitializationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cInitializationAssignmentParserRuleCall_6_0 = (RuleCall)cInitializationAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ResultDeclaration:
		//	'Result' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Result' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?
		public Group getGroup() { return cGroup; }
		
		//'Result'
		public Keyword getResultKeyword_0() { return cResultKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//type=ID
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0() { return cTypeIDTerminalRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//set=SetDefinition?
		public Assignment getSetAssignment_4() { return cSetAssignment_4; }
		
		//SetDefinition
		public RuleCall getSetSetDefinitionParserRuleCall_4_0() { return cSetSetDefinitionParserRuleCall_4_0; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//initialization=Assignment?
		public Assignment getInitializationAssignment_6() { return cInitializationAssignment_6; }
		
		//Assignment
		public RuleCall getInitializationAssignmentParserRuleCall_6_0() { return cInitializationAssignmentParserRuleCall_6_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class SetDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.SetDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIterationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIterationIterationParserRuleCall_2_0 = (RuleCall)cIterationAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetDefinition:
		//	{SetDefinition}
		//	'[' iteration=Iteration? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetDefinition} '[' iteration=Iteration? ']'
		public Group getGroup() { return cGroup; }
		
		//{SetDefinition}
		public Action getSetDefinitionAction_0() { return cSetDefinitionAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//iteration=Iteration?
		public Assignment getIterationAssignment_2() { return cIterationAssignment_2; }
		
		//Iteration
		public RuleCall getIterationIterationParserRuleCall_2_0() { return cIterationIterationParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class IterationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.Iteration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIteratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIteratorIDTerminalRuleCall_0_0 = (RuleCall)cIteratorAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIterableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIterableIDTerminalRuleCall_2_0 = (RuleCall)cIterableAssignment_2.eContents().get(0);
		
		//Iteration:
		//	iterator=ID ':' iterable=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//iterator=ID ':' iterable=ID
		public Group getGroup() { return cGroup; }
		
		//iterator=ID
		public Assignment getIteratorAssignment_0() { return cIteratorAssignment_0; }
		
		//ID
		public RuleCall getIteratorIDTerminalRuleCall_0_0() { return cIteratorIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//iterable=ID
		public Assignment getIterableAssignment_2() { return cIterableAssignment_2; }
		
		//ID
		public RuleCall getIterableIDTerminalRuleCall_2_0() { return cIterableIDTerminalRuleCall_2_0; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cElementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cElementIDTerminalRuleCall_1_0_0 = (RuleCall)cElementAssignment_1_0.eContents().get(0);
		private final Assignment cOperationAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_1_1_0 = (RuleCall)cOperationAssignment_1_1.eContents().get(0);
		
		//Assignment:
		//	'=' (element=ID | operation=Operation);
		@Override public ParserRule getRule() { return rule; }
		
		//'=' (element=ID | operation=Operation)
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//element=ID | operation=Operation
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//element=ID
		public Assignment getElementAssignment_1_0() { return cElementAssignment_1_0; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_1_0_0() { return cElementIDTerminalRuleCall_1_0_0; }
		
		//operation=Operation
		public Assignment getOperationAssignment_1_1() { return cOperationAssignment_1_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_1_1_0() { return cOperationOperationParserRuleCall_1_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cElementIDTerminalRuleCall_0_0_0 = (RuleCall)cElementAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_1_0 = (RuleCall)cCallAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCallAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCallCallParserRuleCall_2_1_0 = (RuleCall)cCallAssignment_2_1.eContents().get(0);
		
		//Operation:
		//	(element=ID '.')? call+=Call ('.' call+=Call)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(element=ID '.')? call+=Call ('.' call+=Call)?
		public Group getGroup() { return cGroup; }
		
		//(element=ID '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//element=ID
		public Assignment getElementAssignment_0_0() { return cElementAssignment_0_0; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_0_0_0() { return cElementIDTerminalRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//call+=Call
		public Assignment getCallAssignment_1() { return cCallAssignment_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_1_0() { return cCallCallParserRuleCall_1_0; }
		
		//('.' call+=Call)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//call+=Call
		public Assignment getCallAssignment_2_1() { return cCallAssignment_2_1; }
		
		//Call
		public RuleCall getCallCallParserRuleCall_2_1_0() { return cCallCallParserRuleCall_2_1_0; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Call:
		//	name=ID '(' parameters=ParameterList? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' parameters=ParameterList? ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterListParameterParserRuleCall_0_0 = (RuleCall)cParameterListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterListParameterParserRuleCall_1_1_0 = (RuleCall)cParameterListAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	parameterList+=Parameter (',' parameterList+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterList+=Parameter (',' parameterList+=Parameter)*
		public Group getGroup() { return cGroup; }
		
		//parameterList+=Parameter
		public Assignment getParameterListAssignment_0() { return cParameterListAssignment_0; }
		
		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_0_0() { return cParameterListParameterParserRuleCall_0_0; }
		
		//(',' parameterList+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameterList+=Parameter
		public Assignment getParameterListAssignment_1_1() { return cParameterListAssignment_1_1; }
		
		//Parameter
		public RuleCall getParameterListParameterParserRuleCall_1_1_0() { return cParameterListParameterParserRuleCall_1_1_0; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "net.ssehub.Lea.Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextSTRINGTerminalRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementIDTerminalRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		private final Assignment cOperationAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOperationOperationParserRuleCall_2_0 = (RuleCall)cOperationAssignment_2.eContents().get(0);
		
		//Parameter:
		//	text=STRING | element=ID | operation=Operation;
		@Override public ParserRule getRule() { return rule; }
		
		//text=STRING | element=ID | operation=Operation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text=STRING
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_0_0() { return cTextSTRINGTerminalRuleCall_0_0; }
		
		//element=ID
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//ID
		public RuleCall getElementIDTerminalRuleCall_1_0() { return cElementIDTerminalRuleCall_1_0; }
		
		//operation=Operation
		public Assignment getOperationAssignment_2() { return cOperationAssignment_2; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_2_0() { return cOperationOperationParserRuleCall_2_0; }
	}
	
	
	private final AnalysisDefinitionElements pAnalysisDefinition;
	private final ChangeIdentifierAssignmentElements pChangeIdentifierAssignment;
	private final ArtifactDeclarationElements pArtifactDeclaration;
	private final FragmentDeclarationElements pFragmentDeclaration;
	private final ResultDeclarationElements pResultDeclaration;
	private final SetDefinitionElements pSetDefinition;
	private final IterationElements pIteration;
	private final AssignmentElements pAssignment;
	private final OperationElements pOperation;
	private final CallElements pCall;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LeaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAnalysisDefinition = new AnalysisDefinitionElements();
		this.pChangeIdentifierAssignment = new ChangeIdentifierAssignmentElements();
		this.pArtifactDeclaration = new ArtifactDeclarationElements();
		this.pFragmentDeclaration = new FragmentDeclarationElements();
		this.pResultDeclaration = new ResultDeclarationElements();
		this.pSetDefinition = new SetDefinitionElements();
		this.pIteration = new IterationElements();
		this.pAssignment = new AssignmentElements();
		this.pOperation = new OperationElements();
		this.pCall = new CallElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.ssehub.Lea".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AnalysisDefinition:
	//	{AnalysisDefinition} (elements+=ArtifactDeclaration
	//	| elements+=FragmentDeclaration
	//	| elements+=ResultDeclaration
	//	| elements+=ChangeIdentifierAssignment)*;
	public AnalysisDefinitionElements getAnalysisDefinitionAccess() {
		return pAnalysisDefinition;
	}
	
	public ParserRule getAnalysisDefinitionRule() {
		return getAnalysisDefinitionAccess().getRule();
	}
	
	//ChangeIdentifierAssignment:
	//	'assign' identifier=ID 'to' elements+=ID (',' elements+=ID)* ';'?;
	public ChangeIdentifierAssignmentElements getChangeIdentifierAssignmentAccess() {
		return pChangeIdentifierAssignment;
	}
	
	public ParserRule getChangeIdentifierAssignmentRule() {
		return getChangeIdentifierAssignmentAccess().getRule();
	}
	
	//ArtifactDeclaration:
	//	'Artifact' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?;
	public ArtifactDeclarationElements getArtifactDeclarationAccess() {
		return pArtifactDeclaration;
	}
	
	public ParserRule getArtifactDeclarationRule() {
		return getArtifactDeclarationAccess().getRule();
	}
	
	//FragmentDeclaration:
	//	'Fragment' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?;
	public FragmentDeclarationElements getFragmentDeclarationAccess() {
		return pFragmentDeclaration;
	}
	
	public ParserRule getFragmentDeclarationRule() {
		return getFragmentDeclarationAccess().getRule();
	}
	
	//ResultDeclaration:
	//	'Result' '<' type=ID '>' set=SetDefinition? name=ID initialization=Assignment? ';'?;
	public ResultDeclarationElements getResultDeclarationAccess() {
		return pResultDeclaration;
	}
	
	public ParserRule getResultDeclarationRule() {
		return getResultDeclarationAccess().getRule();
	}
	
	//SetDefinition:
	//	{SetDefinition}
	//	'[' iteration=Iteration? ']';
	public SetDefinitionElements getSetDefinitionAccess() {
		return pSetDefinition;
	}
	
	public ParserRule getSetDefinitionRule() {
		return getSetDefinitionAccess().getRule();
	}
	
	//Iteration:
	//	iterator=ID ':' iterable=ID;
	public IterationElements getIterationAccess() {
		return pIteration;
	}
	
	public ParserRule getIterationRule() {
		return getIterationAccess().getRule();
	}
	
	//Assignment:
	//	'=' (element=ID | operation=Operation);
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Operation:
	//	(element=ID '.')? call+=Call ('.' call+=Call)?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Call:
	//	name=ID '(' parameters=ParameterList? ')';
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//ParameterList:
	//	parameterList+=Parameter (',' parameterList+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Parameter:
	//	text=STRING | element=ID | operation=Operation;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
