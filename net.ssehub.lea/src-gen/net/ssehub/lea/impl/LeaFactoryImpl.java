/**
 * generated by Xtext 2.18.0
 */
package net.ssehub.lea.impl;

import net.ssehub.lea.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LeaFactoryImpl extends EFactoryImpl implements LeaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LeaFactory init()
  {
    try
    {
      LeaFactory theLeaFactory = (LeaFactory)EPackage.Registry.INSTANCE.getEFactory(LeaPackage.eNS_URI);
      if (theLeaFactory != null)
      {
        return theLeaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LeaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LeaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LeaPackage.ANALYSIS_DEFINITION: return createAnalysisDefinition();
      case LeaPackage.CHANGE_IDENTIFIER_ASSIGNMENT: return createChangeIdentifierAssignment();
      case LeaPackage.ARTIFACT_DECLARATION: return createArtifactDeclaration();
      case LeaPackage.FRAGMENT_DECLARATION: return createFragmentDeclaration();
      case LeaPackage.RESULT_DECLARATION: return createResultDeclaration();
      case LeaPackage.SET_DEFINITION: return createSetDefinition();
      case LeaPackage.ITERATION: return createIteration();
      case LeaPackage.ASSIGNMENT: return createAssignment();
      case LeaPackage.OPERATION: return createOperation();
      case LeaPackage.CALL: return createCall();
      case LeaPackage.PARAMETER_LIST: return createParameterList();
      case LeaPackage.PARAMETER: return createParameter();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AnalysisDefinition createAnalysisDefinition()
  {
    AnalysisDefinitionImpl analysisDefinition = new AnalysisDefinitionImpl();
    return analysisDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChangeIdentifierAssignment createChangeIdentifierAssignment()
  {
    ChangeIdentifierAssignmentImpl changeIdentifierAssignment = new ChangeIdentifierAssignmentImpl();
    return changeIdentifierAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArtifactDeclaration createArtifactDeclaration()
  {
    ArtifactDeclarationImpl artifactDeclaration = new ArtifactDeclarationImpl();
    return artifactDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FragmentDeclaration createFragmentDeclaration()
  {
    FragmentDeclarationImpl fragmentDeclaration = new FragmentDeclarationImpl();
    return fragmentDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ResultDeclaration createResultDeclaration()
  {
    ResultDeclarationImpl resultDeclaration = new ResultDeclarationImpl();
    return resultDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetDefinition createSetDefinition()
  {
    SetDefinitionImpl setDefinition = new SetDefinitionImpl();
    return setDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Iteration createIteration()
  {
    IterationImpl iteration = new IterationImpl();
    return iteration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Operation createOperation()
  {
    OperationImpl operation = new OperationImpl();
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Call createCall()
  {
    CallImpl call = new CallImpl();
    return call;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeaPackage getLeaPackage()
  {
    return (LeaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LeaPackage getPackage()
  {
    return LeaPackage.eINSTANCE;
  }

} //LeaFactoryImpl
