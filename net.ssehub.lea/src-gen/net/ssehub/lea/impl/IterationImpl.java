/**
 * generated by Xtext 2.18.0
 */
package net.ssehub.lea.impl;

import net.ssehub.lea.Iteration;
import net.ssehub.lea.LeaPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Iteration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link net.ssehub.lea.impl.IterationImpl#getIterator <em>Iterator</em>}</li>
 *   <li>{@link net.ssehub.lea.impl.IterationImpl#getIterable <em>Iterable</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IterationImpl extends MinimalEObjectImpl.Container implements Iteration
{
  /**
   * The default value of the '{@link #getIterator() <em>Iterator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterator()
   * @generated
   * @ordered
   */
  protected static final String ITERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIterator() <em>Iterator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterator()
   * @generated
   * @ordered
   */
  protected String iterator = ITERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getIterable() <em>Iterable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterable()
   * @generated
   * @ordered
   */
  protected static final String ITERABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIterable() <em>Iterable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterable()
   * @generated
   * @ordered
   */
  protected String iterable = ITERABLE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IterationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LeaPackage.Literals.ITERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIterator()
  {
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIterator(String newIterator)
  {
    String oldIterator = iterator;
    iterator = newIterator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LeaPackage.ITERATION__ITERATOR, oldIterator, iterator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIterable()
  {
    return iterable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIterable(String newIterable)
  {
    String oldIterable = iterable;
    iterable = newIterable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LeaPackage.ITERATION__ITERABLE, oldIterable, iterable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LeaPackage.ITERATION__ITERATOR:
        return getIterator();
      case LeaPackage.ITERATION__ITERABLE:
        return getIterable();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LeaPackage.ITERATION__ITERATOR:
        setIterator((String)newValue);
        return;
      case LeaPackage.ITERATION__ITERABLE:
        setIterable((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LeaPackage.ITERATION__ITERATOR:
        setIterator(ITERATOR_EDEFAULT);
        return;
      case LeaPackage.ITERATION__ITERABLE:
        setIterable(ITERABLE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LeaPackage.ITERATION__ITERATOR:
        return ITERATOR_EDEFAULT == null ? iterator != null : !ITERATOR_EDEFAULT.equals(iterator);
      case LeaPackage.ITERATION__ITERABLE:
        return ITERABLE_EDEFAULT == null ? iterable != null : !ITERABLE_EDEFAULT.equals(iterable);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (iterator: ");
    result.append(iterator);
    result.append(", iterable: ");
    result.append(iterable);
    result.append(')');
    return result.toString();
  }

} //IterationImpl
