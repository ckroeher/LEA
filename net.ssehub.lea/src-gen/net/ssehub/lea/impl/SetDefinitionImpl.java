/**
 * generated by Xtext 2.18.0
 */
package net.ssehub.lea.impl;

import net.ssehub.lea.Iteration;
import net.ssehub.lea.LeaPackage;
import net.ssehub.lea.SetDefinition;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Set Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link net.ssehub.lea.impl.SetDefinitionImpl#getIteration <em>Iteration</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SetDefinitionImpl extends MinimalEObjectImpl.Container implements SetDefinition
{
  /**
   * The cached value of the '{@link #getIteration() <em>Iteration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIteration()
   * @generated
   * @ordered
   */
  protected Iteration iteration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SetDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LeaPackage.Literals.SET_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Iteration getIteration()
  {
    return iteration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIteration(Iteration newIteration, NotificationChain msgs)
  {
    Iteration oldIteration = iteration;
    iteration = newIteration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LeaPackage.SET_DEFINITION__ITERATION, oldIteration, newIteration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIteration(Iteration newIteration)
  {
    if (newIteration != iteration)
    {
      NotificationChain msgs = null;
      if (iteration != null)
        msgs = ((InternalEObject)iteration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LeaPackage.SET_DEFINITION__ITERATION, null, msgs);
      if (newIteration != null)
        msgs = ((InternalEObject)newIteration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LeaPackage.SET_DEFINITION__ITERATION, null, msgs);
      msgs = basicSetIteration(newIteration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LeaPackage.SET_DEFINITION__ITERATION, newIteration, newIteration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LeaPackage.SET_DEFINITION__ITERATION:
        return basicSetIteration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LeaPackage.SET_DEFINITION__ITERATION:
        return getIteration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LeaPackage.SET_DEFINITION__ITERATION:
        setIteration((Iteration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LeaPackage.SET_DEFINITION__ITERATION:
        setIteration((Iteration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LeaPackage.SET_DEFINITION__ITERATION:
        return iteration != null;
    }
    return super.eIsSet(featureID);
  }

} //SetDefinitionImpl
