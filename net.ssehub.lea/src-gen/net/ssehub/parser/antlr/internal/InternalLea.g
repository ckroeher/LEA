/*
 * generated by Xtext 2.18.0
 */
grammar InternalLea;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package net.ssehub.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.ssehub.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.ssehub.services.LeaGrammarAccess;

}

@parser::members {

 	private LeaGrammarAccess grammarAccess;

    public InternalLeaParser(TokenStream input, LeaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AnalysisDefinition";
   	}

   	@Override
   	protected LeaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAnalysisDefinition
entryRuleAnalysisDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnalysisDefinitionRule()); }
	iv_ruleAnalysisDefinition=ruleAnalysisDefinition
	{ $current=$iv_ruleAnalysisDefinition.current; }
	EOF;

// Rule AnalysisDefinition
ruleAnalysisDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnalysisDefinitionAccess().getAnalysisDefinitionAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAnalysisDefinitionAccess().getElementDeclarationsElementDeclarationParserRuleCall_1_0_0());
					}
					lv_elementDeclarations_1_0=ruleElementDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnalysisDefinitionRule());
						}
						add(
							$current,
							"elementDeclarations",
							lv_elementDeclarations_1_0,
							"net.ssehub.Lea.ElementDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAnalysisDefinitionAccess().getChangeIdentifierAssignmentsChangeIdentifierAssignmentParserRuleCall_1_1_0());
					}
					lv_changeIdentifierAssignments_2_0=ruleChangeIdentifierAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAnalysisDefinitionRule());
						}
						add(
							$current,
							"changeIdentifierAssignments",
							lv_changeIdentifierAssignments_2_0,
							"net.ssehub.Lea.ChangeIdentifierAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleChangeIdentifierAssignment
entryRuleChangeIdentifierAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChangeIdentifierAssignmentRule()); }
	iv_ruleChangeIdentifierAssignment=ruleChangeIdentifierAssignment
	{ $current=$iv_ruleChangeIdentifierAssignment.current; }
	EOF;

// Rule ChangeIdentifierAssignment
ruleChangeIdentifierAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='assign'
		{
			newLeafNode(otherlv_0, grammarAccess.getChangeIdentifierAssignmentAccess().getAssignKeyword_0());
		}
		(
			(
				lv_identifier_1_0=RULE_ID
				{
					newLeafNode(lv_identifier_1_0, grammarAccess.getChangeIdentifierAssignmentAccess().getIdentifierIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeIdentifierAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getChangeIdentifierAssignmentAccess().getToKeyword_2());
		}
		(
			(
				lv_elements_3_0=RULE_ID
				{
					newLeafNode(lv_elements_3_0, grammarAccess.getChangeIdentifierAssignmentAccess().getElementsIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChangeIdentifierAssignmentRule());
					}
					addWithLastConsumed(
						$current,
						"elements",
						lv_elements_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getChangeIdentifierAssignmentAccess().getCommaKeyword_4_0());
			}
			(
				(
					lv_elements_5_0=RULE_ID
					{
						newLeafNode(lv_elements_5_0, grammarAccess.getChangeIdentifierAssignmentAccess().getElementsIDTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getChangeIdentifierAssignmentRule());
						}
						addWithLastConsumed(
							$current,
							"elements",
							lv_elements_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
		(
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getChangeIdentifierAssignmentAccess().getSemicolonKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleElementDeclaration
entryRuleElementDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementDeclarationRule()); }
	iv_ruleElementDeclaration=ruleElementDeclaration
	{ $current=$iv_ruleElementDeclaration.current; }
	EOF;

// Rule ElementDeclaration
ruleElementDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElementDeclarationAccess().getGenericTypGenericTypeParserRuleCall_0_0());
				}
				lv_genericTyp_0_0=ruleGenericType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementDeclarationRule());
					}
					set(
						$current,
						"genericTyp",
						lv_genericTyp_0_0,
						"net.ssehub.Lea.GenericType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getElementDeclarationAccess().getLessThanSignKeyword_1());
		}
		(
			(
				lv_parameterType_2_0=RULE_ID
				{
					newLeafNode(lv_parameterType_2_0, grammarAccess.getElementDeclarationAccess().getParameterTypeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"parameterType",
						lv_parameterType_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='>'
		{
			newLeafNode(otherlv_3, grammarAccess.getElementDeclarationAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElementDeclarationAccess().getSetSetDefinitionParserRuleCall_4_0());
				}
				lv_set_4_0=ruleSetDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementDeclarationRule());
					}
					set(
						$current,
						"set",
						lv_set_4_0,
						"net.ssehub.Lea.SetDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getElementDeclarationAccess().getNameIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getElementDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElementDeclarationAccess().getInitializationAssignmentParserRuleCall_6_0());
				}
				lv_initialization_6_0=ruleAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElementDeclarationRule());
					}
					set(
						$current,
						"initialization",
						lv_initialization_6_0,
						"net.ssehub.Lea.Assignment");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getElementDeclarationAccess().getSemicolonKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleGenericType
entryRuleGenericType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGenericTypeRule()); }
	iv_ruleGenericType=ruleGenericType
	{ $current=$iv_ruleGenericType.current.getText(); }
	EOF;

// Rule GenericType
ruleGenericType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='Artifact'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGenericTypeAccess().getArtifactKeyword_0());
		}
		    |
		kw='Fragment'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGenericTypeAccess().getFragmentKeyword_1());
		}
		    |
		kw='Result'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGenericTypeAccess().getResultKeyword_2());
		}
	)
;

// Entry rule entryRuleSetDefinition
entryRuleSetDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetDefinitionRule()); }
	iv_ruleSetDefinition=ruleSetDefinition
	{ $current=$iv_ruleSetDefinition.current; }
	EOF;

// Rule SetDefinition
ruleSetDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetDefinitionAccess().getSetDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getSetDefinitionAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetDefinitionAccess().getIterationIterationParserRuleCall_2_0());
				}
				lv_iteration_2_0=ruleIteration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetDefinitionRule());
					}
					set(
						$current,
						"iteration",
						lv_iteration_2_0,
						"net.ssehub.Lea.Iteration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getSetDefinitionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleIteration
entryRuleIteration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIterationRule()); }
	iv_ruleIteration=ruleIteration
	{ $current=$iv_ruleIteration.current; }
	EOF;

// Rule Iteration
ruleIteration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_iterator_0_0=RULE_ID
				{
					newLeafNode(lv_iterator_0_0, grammarAccess.getIterationAccess().getIteratorIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIterationRule());
					}
					setWithLastConsumed(
						$current,
						"iterator",
						lv_iterator_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getIterationAccess().getColonKeyword_1());
		}
		(
			(
				lv_iterable_2_0=RULE_ID
				{
					newLeafNode(lv_iterable_2_0, grammarAccess.getIterationAccess().getIterableIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIterationRule());
					}
					setWithLastConsumed(
						$current,
						"iterable",
						lv_iterable_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='='
		{
			newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_0());
		}
		(
			(
				(
					lv_element_1_0=RULE_ID
					{
						newLeafNode(lv_element_1_0, grammarAccess.getAssignmentAccess().getElementIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentRule());
						}
						setWithLastConsumed(
							$current,
							"element",
							lv_element_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getOperationOperationParserRuleCall_1_1_0());
					}
					lv_operation_2_0=ruleOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"operation",
							lv_operation_2_0,
							"net.ssehub.Lea.Operation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	iv_ruleOperation=ruleOperation
	{ $current=$iv_ruleOperation.current; }
	EOF;

// Rule Operation
ruleOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_element_0_0=RULE_ID
					{
						newLeafNode(lv_element_0_0, grammarAccess.getOperationAccess().getElementIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperationRule());
						}
						setWithLastConsumed(
							$current,
							"element",
							lv_element_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getFullStopKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOperationAccess().getCallCallParserRuleCall_1_0());
				}
				lv_call_2_0=ruleCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperationRule());
					}
					add(
						$current,
						"call",
						lv_call_2_0,
						"net.ssehub.Lea.Call");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getFullStopKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOperationAccess().getCallCallParserRuleCall_2_1_0());
					}
					lv_call_4_0=ruleCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOperationRule());
						}
						add(
							$current,
							"call",
							lv_call_4_0,
							"net.ssehub.Lea.Call");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current; }
	EOF;

// Rule Call
ruleCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCallAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCallRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCallAccess().getParametersParameterListParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCallRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"net.ssehub.Lea.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current; }
	EOF;

// Rule ParameterList
ruleParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterListAccess().getParameterListParameterParserRuleCall_0_0());
				}
				lv_parameterList_0_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterListRule());
					}
					add(
						$current,
						"parameterList",
						lv_parameterList_0_0,
						"net.ssehub.Lea.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParameterListParameterParserRuleCall_1_1_0());
					}
					lv_parameterList_2_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameterList",
							lv_parameterList_2_0,
							"net.ssehub.Lea.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_text_0_0=RULE_STRING
				{
					newLeafNode(lv_text_0_0, grammarAccess.getParameterAccess().getTextSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"text",
						lv_text_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_element_1_0=RULE_ID
				{
					newLeafNode(lv_element_1_0, grammarAccess.getParameterAccess().getElementIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"element",
						lv_element_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getOperationOperationParserRuleCall_2_0());
				}
				lv_operation_2_0=ruleOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"operation",
						lv_operation_2_0,
						"net.ssehub.Lea.Operation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
