/*
 * generated by Xtext 2.18.0
 */
package net.ssehub.serializer;

import com.google.inject.Inject;
import java.util.Set;
import net.ssehub.lea.AnalysisDefinition;
import net.ssehub.lea.Assignment;
import net.ssehub.lea.Call;
import net.ssehub.lea.ChangeIdentifierAssignment;
import net.ssehub.lea.ElementDeclaration;
import net.ssehub.lea.Iteration;
import net.ssehub.lea.LeaPackage;
import net.ssehub.lea.Operation;
import net.ssehub.lea.ParameterList;
import net.ssehub.lea.SetDefinition;
import net.ssehub.services.LeaGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LeaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LeaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LeaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LeaPackage.ANALYSIS_DEFINITION:
				sequence_AnalysisDefinition(context, (AnalysisDefinition) semanticObject); 
				return; 
			case LeaPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case LeaPackage.CALL:
				sequence_Call(context, (Call) semanticObject); 
				return; 
			case LeaPackage.CHANGE_IDENTIFIER_ASSIGNMENT:
				sequence_ChangeIdentifierAssignment(context, (ChangeIdentifierAssignment) semanticObject); 
				return; 
			case LeaPackage.ELEMENT_DECLARATION:
				sequence_ElementDeclaration(context, (ElementDeclaration) semanticObject); 
				return; 
			case LeaPackage.ITERATION:
				sequence_Iteration(context, (Iteration) semanticObject); 
				return; 
			case LeaPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case LeaPackage.PARAMETER:
				sequence_Parameter(context, (net.ssehub.lea.Parameter) semanticObject); 
				return; 
			case LeaPackage.PARAMETER_LIST:
				sequence_ParameterList(context, (ParameterList) semanticObject); 
				return; 
			case LeaPackage.SET_DEFINITION:
				sequence_SetDefinition(context, (SetDefinition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AnalysisDefinition returns AnalysisDefinition
	 *
	 * Constraint:
	 *     (elementDeclarations+=ElementDeclaration | changeIdentifierAssignments+=ChangeIdentifierAssignment)*
	 */
	protected void sequence_AnalysisDefinition(ISerializationContext context, AnalysisDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (element=ID | operation=Operation)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Call returns Call
	 *
	 * Constraint:
	 *     (name=ID parameters=ParameterList?)
	 */
	protected void sequence_Call(ISerializationContext context, Call semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChangeIdentifierAssignment returns ChangeIdentifierAssignment
	 *
	 * Constraint:
	 *     (identifier=ID elements+=ID elements+=ID*)
	 */
	protected void sequence_ChangeIdentifierAssignment(ISerializationContext context, ChangeIdentifierAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ElementDeclaration returns ElementDeclaration
	 *
	 * Constraint:
	 *     (genericTyp=GenericType parameterType=ID set=SetDefinition? name=ID initialization=Assignment?)
	 */
	protected void sequence_ElementDeclaration(ISerializationContext context, ElementDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Iteration returns Iteration
	 *
	 * Constraint:
	 *     (iterator=ID iterable=ID)
	 */
	protected void sequence_Iteration(ISerializationContext context, Iteration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LeaPackage.Literals.ITERATION__ITERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LeaPackage.Literals.ITERATION__ITERATOR));
			if (transientValues.isValueTransient(semanticObject, LeaPackage.Literals.ITERATION__ITERABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LeaPackage.Literals.ITERATION__ITERABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIterationAccess().getIteratorIDTerminalRuleCall_0_0(), semanticObject.getIterator());
		feeder.accept(grammarAccess.getIterationAccess().getIterableIDTerminalRuleCall_2_0(), semanticObject.getIterable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     (element=ID? call+=Call call+=Call?)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ParameterList returns ParameterList
	 *
	 * Constraint:
	 *     (parameterList+=Parameter parameterList+=Parameter*)
	 */
	protected void sequence_ParameterList(ISerializationContext context, ParameterList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (text=STRING | element=ID | operation=Operation)
	 */
	protected void sequence_Parameter(ISerializationContext context, net.ssehub.lea.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SetDefinition returns SetDefinition
	 *
	 * Constraint:
	 *     iteration=Iteration?
	 */
	protected void sequence_SetDefinition(ISerializationContext context, SetDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
